import React from "react";
import "./css.css";
export function Lesson1() {
  return (
    <>
      <div>
        <h1>BehaviorSubject in angular</h1>
        <p>
          בספרית rxjs יש מספר סוגים של subject , כל אחד והיעוד שלו (והיתרון
          שלו). הפעם אנחנו נראה איך להשתמש ב-behaviorSubject בקובץ service.
          היתרון של behaviorSubject הוא העובדה שהוא דורש איתחול כבר בהתחלה, כך
          שאנחנו יכולים לשלוט מה ערך ברירת המחדל שלו עוד לפני שהגיע המידע
          האמיתי. כך ניתן להשען על מידע זה בקומפוננטות שמשתמשות בשירות שלו. אם
          ברירת המחדל שלו זה מערך ריק אנחנו נוכל להפעיל בקומפוננטה ngIf שיראה
          תגית מסויימת רק אם יש מידע (המערך גדול יותר מ-0).
        </p>
        <img src="/images/behavior.bmp" alt="Footer Image" />
      </div>
      <div>
        <h1>.next</h1>
        <p>.next היא שיטה (מתודה)</p>
        <p>עדכון מצב: כאשר יש מצב משתנה שצריך להיות זמין ברחבי האפליקציה.</p>
        <p>בעזרת מתודה זו אנחנו יכולים לעדכן ערך ברחבי אפליקציה </p>
        <p>
          בעזרת מתודה זו אנחנו יכולים לעדכן ערכים שנמצאים אצל אבא או בן בין
          קומפוננתות
        </p>
        <img src="/images/next.bmp" alt="Footer Image" />
      </div>
      <div>
        <h1>EventEmitter</h1>
       <p> EventEmitter הוא מחלקה (class) מובנית באנגולר, המשמשת להעברת אירועים
        (events) בין רכיבים (components). הוא ממומש כחלק ממערכת ההקשבה לאירועים
        של אנגולר ומאפשר לרכיבים לשדר אירועים כלפי מעלה, כלפי רכיב הורה (parent
        component) או רכיבים אחרים שמאזינים לאירועים אלה. שימושים נפוצים
        ב-EventEmitter תקשורת בין רכיבים: כאשר יש צורך לשדר אירועים מרכיב ילדים
        לרכיב הורה, למשל כאשר רכיב ילדים משנה מצב כלשהו שחשוב לרכיב הורה לדעת
        עליו. חיווי על פעולות: משמש לחיווי על פעולות כמו לחיצה על כפתור, בחירת
        אפשרות בתפריט, או שינוי במצב של טופס. דוגמה לשימוש ב-EventEmitter נניח
        שיש לנו רכיב ChildComponent שמבצע פעולה כלשהי, והוא צריך להודיע על כך
        לרכיב ParentComponent.
        </p>
        <img src="/images/eventEmitter.bmp" alt="Footer Image" />
      </div>
      <div>
        <p>באנגולר, דירקטיבה (Directive) היא הוראה למנוע רכיבים לשנות את הדומ (DOM) או להתנהג בצורה מסוימת. הדירקטיבות הן אבני בניין חיוניות במבנה של אנגולר והן מאפשרות ליצור רכיבים מודולריים, גמישים ודינמיים.

ישנם שלושה סוגים עיקריים של דירקטיבות באנגולר:

דירקטיבות רכיב (Component Directives):

סוג הדירקטיבה הנפוץ ביותר, המייצג רכיבים (components).
רכיב באנגולר הוא למעשה דירקטיבה עם תבנית (template).
משתמשים בהן כדי להגדיר חלקים נפרדים בממשק המשתמש של היישום, לכל אחד תבנית ולוגיקה משלו.
דירקטיבות מבניות (Structural Directives):

משפיעות על מבנה ה-DOM, על ידי הוספה או הסרה של אלמנטים.
בדרך כלל, דירקטיבות אלה משתמשות בתחביר של * (כוכבית).
דוגמאות כוללות:
*ngIf: מציג או מסתיר אלמנטים בהתאם לתנאי בוליאני.
*ngFor: משמש ללולאות על רשימה של פריטים ויצירת אלמנט עבור כל פריט.
*ngSwitch: משמש להחלפת תבניות בהתאם לתנאי מסוים.
דירקטיבות מאפיינים (Attribute Directives):

משנות את המראה או ההתנהגות של אלמנט, רכיב או דומ אחר.
בדרך כלל משנות מאפיינים או סגנונות של אלמנטים קיימים.
דוגמאות כוללות:
ngClass: מאפשרת להחיל או להסיר מחלקות CSS על אלמנט דומ בצורה דינמית.
ngStyle: מאפשרת להחיל סגנונות אינליין על אלמנט דומ בצורה דינמית.
יצירת דירקטיבה מותאמת אישית
אפשר גם ליצור דירקטיבות מותאמות אישית כדי להוסיף התנהגות מותאמת לרכיבים.

דוגמה לדירקטיבה מותאמת אישית שמשנה את צבע הרקע של אלמנט בעת העברת עכבר מעליו:

highlight.directive.ts:</p>
<img src="/images/directives.bmp" alt="Footer Image" />

<p>במקרה זה, הדירקטיבה HighlightDirective משנה את צבע הרקע של אלמנט למעלה כאשר העכבר עובר מעליו, ומחזירה את הצבע המקורי כאשר העכבר עוזב את האזור.</p>
      </div>
    </>
  );
}
